// This file is auto-generated by @hey-api/openapi-ts

export type AuditLogEntry = {
    at: string;
    event_id: number;
    id: number;
    new_data?: unknown;
    note?: string | null;
    old_data?: unknown;
    organizer_id: number;
    type: AuditType;
};

export type AuditType = 'CREATE' | 'UPDATE' | 'DELETE';

export type AuthUserResponse = {
    id: number;
    name: string;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type CreateEventRequest = {
    audit_note?: string | null;
    description_de?: string | null;
    description_en?: string | null;
    end_date_time?: string | null;
    event_url?: string | null;
    publish_app?: boolean;
    publish_newsletter?: boolean;
    start_date_time: string;
    title_de: string;
    title_en: string;
};

export type CreateOrganizerRequest = {
    description_de?: string | null;
    description_en?: string | null;
    instagram_url?: string | null;
    name: string;
    website_url?: string | null;
};

export type ErrorResponse = {
    message: string;
};

export type Event = {
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    end_date_time?: string | null;
    event_url?: string | null;
    id: number;
    organizer_id: number;
    publish_app: boolean;
    publish_newsletter: boolean;
    start_date_time: string;
    title_de: string;
    title_en: string;
    updated_at: string;
};

export type HealthResponse = {
    message: string;
    status: string;
};

export type InitAccountRequest = {
    email: string;
    password: string;
    token: string;
};

export type ListAuditLogsQuery = {
    event_id?: number | null;
    limit?: number | null;
    offset?: number | null;
    organizer_id?: number | null;
};

export type ListEventsQuery = {
    limit?: number | null;
    offset?: number | null;
    organizer_id?: number | null;
    upcoming_only?: boolean | null;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type Organizer = {
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    id: number;
    instagram_url?: string | null;
    name: string;
    updated_at: string;
    website_url?: string | null;
};

export type SetupTokenResponse = {
    setup_token: string;
};

export type UpdateEventRequest = {
    audit_note?: string | null;
    description_de?: string | null;
    description_en?: string | null;
    end_date_time?: string | null;
    event_url?: string | null;
    publish_app?: boolean | null;
    publish_newsletter?: boolean | null;
    start_date_time?: string | null;
    title_de?: string | null;
    title_en?: string | null;
};

export type UpdateOrganizerRequest = {
    description_de?: string | null;
    description_en?: string | null;
    instagram_url?: string | null;
    name?: string | null;
    website_url?: string | null;
};

export type ListAuditLogsData = {
    body?: never;
    path?: never;
    query?: {
        event_id?: number;
        organizer_id?: number;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/audit-logs';
};

export type ListAuditLogsResponses = {
    /**
     * List audit log entries
     */
    200: Array<AuditLogEntry>;
};

export type ListAuditLogsResponse = ListAuditLogsResponses[keyof ListAuditLogsResponses];

export type ChangePasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/change-password';
};

export type ChangePasswordResponses = {
    /**
     * Password changed
     */
    204: void;
};

export type ChangePasswordResponse = ChangePasswordResponses[keyof ChangePasswordResponses];

export type InitAccountData = {
    body: InitAccountRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/init';
};

export type InitAccountErrors = {
    /**
     * Already initialized or invalid token
     */
    400: unknown;
};

export type InitAccountResponses = {
    /**
     * Initialized; cookie set
     */
    200: AuthUserResponse;
};

export type InitAccountResponse = InitAccountResponses[keyof InitAccountResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginErrors = {
    /**
     * Invalid credentials
     */
    401: unknown;
};

export type LoginResponses = {
    /**
     * Logged in; cookie set
     */
    200: AuthUserResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutResponses = {
    /**
     * Logged out
     */
    204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type MeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/me';
};

export type MeErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type MeResponses = {
    /**
     * Current user
     */
    200: AuthUserResponse;
};

export type MeResponse = MeResponses[keyof MeResponses];

export type ListEventsData = {
    body?: never;
    path?: never;
    query?: {
        organizer_id?: number;
        upcoming_only?: boolean;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/events';
};

export type ListEventsResponses = {
    /**
     * List events
     */
    200: Array<Event>;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type CreateEventData = {
    body: CreateEventRequest;
    path?: never;
    query?: never;
    url: '/api/v1/events';
};

export type CreateEventResponses = {
    /**
     * Event created
     */
    201: Event;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type DeleteEventData = {
    body?: never;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type DeleteEventResponses = {
    /**
     * Event removed
     */
    204: void;
};

export type DeleteEventResponse = DeleteEventResponses[keyof DeleteEventResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type GetEventResponses = {
    /**
     * Event details
     */
    200: Event;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type UpdateEventData = {
    body: UpdateEventRequest;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type UpdateEventResponses = {
    /**
     * Event updated
     */
    200: Event;
};

export type UpdateEventResponse = UpdateEventResponses[keyof UpdateEventResponses];

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/healthcheck';
};

export type HealthCheckResponses = {
    /**
     * API is ready
     */
    200: HealthResponse;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type ListOrganizersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organizers';
};

export type ListOrganizersResponses = {
    /**
     * List organizers
     */
    200: Array<Organizer>;
};

export type ListOrganizersResponse = ListOrganizersResponses[keyof ListOrganizersResponses];

export type CreateOrganizerData = {
    body: CreateOrganizerRequest;
    path?: never;
    query?: never;
    url: '/api/v1/organizers';
};

export type CreateOrganizerResponses = {
    /**
     * Organizer created
     */
    201: Organizer;
};

export type CreateOrganizerResponse = CreateOrganizerResponses[keyof CreateOrganizerResponses];

export type DeleteOrganizerData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type DeleteOrganizerResponses = {
    /**
     * Organizer removed
     */
    204: void;
};

export type DeleteOrganizerResponse = DeleteOrganizerResponses[keyof DeleteOrganizerResponses];

export type GetOrganizerData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type GetOrganizerResponses = {
    /**
     * Organizer details
     */
    200: Organizer;
};

export type GetOrganizerResponse = GetOrganizerResponses[keyof GetOrganizerResponses];

export type UpdateOrganizerData = {
    body: UpdateOrganizerRequest;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type UpdateOrganizerResponses = {
    /**
     * Organizer updated
     */
    200: Organizer;
};

export type UpdateOrganizerResponse = UpdateOrganizerResponses[keyof UpdateOrganizerResponses];

export type GenerateSetupTokenData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}/setup-token';
};

export type GenerateSetupTokenResponses = {
    /**
     * Setup token generated
     */
    200: SetupTokenResponse;
};

export type GenerateSetupTokenResponse = GenerateSetupTokenResponses[keyof GenerateSetupTokenResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};
