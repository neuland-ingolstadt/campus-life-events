// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};

export type AccountType = 'ADMIN' | 'ORGANIZER';

export type AdminWithInvite = {
    created_at: string;
    display_name: string;
    email?: string | null;
    id: number;
    invite_expires_at?: string | null;
    invite_status: InviteStatus;
    updated_at: string;
};

export type AuditLogEntry = {
    at: string;
    event_id: number;
    id: number;
    new_data?: unknown;
    old_data?: unknown;
    organizer_id: number;
    type: AuditType;
    user_id?: number | null;
};

export type AuditType = 'CREATE' | 'UPDATE' | 'DELETE';

export type AuthUserResponse = {
    account_id: number;
    account_type: AccountType;
    can_access_newsletter: boolean;
    display_name: string;
    organizer_id?: number | null;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type CreateEventRequest = {
    description_de?: string | null;
    description_en?: string | null;
    end_date_time: string;
    event_url?: string | null;
    location?: string | null;
    publish_app?: boolean;
    publish_in_ical?: boolean;
    publish_newsletter?: boolean;
    publish_web?: boolean;
    start_date_time: string;
    title_de: string;
    title_en: string;
};

export type CreateOrganizerRequest = {
    email: string;
    name: string;
};

export type ErrorResponse = {
    message: string;
};

export type Event = {
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    end_date_time: string;
    event_url?: string | null;
    id: number;
    location?: string | null;
    organizer_id: number;
    publish_app: boolean;
    publish_in_ical: boolean;
    publish_newsletter: boolean;
    publish_web: boolean;
    start_date_time: string;
    title_de: string;
    title_en: string;
    updated_at: string;
};

export type EventWithOrganizer = {
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    end_date_time: string;
    event_url?: string | null;
    id: number;
    location?: string | null;
    organizer_id: number;
    organizer_name: string;
    organizer_website?: string | null;
    publish_app: boolean;
    publish_in_ical: boolean;
    publish_newsletter: boolean;
    publish_web: boolean;
    start_date_time: string;
    title_de: string;
    title_en: string;
    updated_at: string;
};

export type HealthResponse = {
    message: string;
    status: string;
};

export type InitAccountRequest = {
    email: string;
    password: string;
    token: string;
};

export type InviteAdminRequest = {
    display_name: string;
    email: string;
};

export type InviteStatus = 'PENDING' | 'EXPIRED' | 'COMPLETED';

export type ListAuditLogsQuery = {
    event_id?: number | null;
    limit?: number | null;
    offset?: number | null;
    organizer_id?: number | null;
};

export type ListEventsQuery = {
    limit?: number | null;
    offset?: number | null;
    organizer_id?: number | null;
    upcoming_only?: boolean | null;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type NewsletterDataResponse = {
    all_organizers: Array<Organizer>;
    following_week_events: Array<EventWithOrganizer>;
    next_week_events: Array<EventWithOrganizer>;
    next_week_start: string;
    subject: string;
    week_after_start: string;
};

export type Organizer = {
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    id: number;
    instagram_url?: string | null;
    linkedin_url?: string | null;
    location?: string | null;
    name: string;
    newsletter: boolean;
    non_profit: boolean;
    registration_number?: string | null;
    updated_at: string;
    website_url?: string | null;
};

export type OrganizerWithInvite = {
    created_at: string;
    email?: string | null;
    id: number;
    invite_expires_at?: string | null;
    invite_status: InviteStatus;
    name: string;
    newsletter: boolean;
    updated_at: string;
};

export type OrganizerWithStatsResponse = {
    active_events_count: number;
    activity_score: number;
    created_at: string;
    description_de?: string | null;
    description_en?: string | null;
    id: number;
    instagram_url?: string | null;
    linkedin_url?: string | null;
    location?: string | null;
    name: string;
    newsletter: boolean;
    non_profit: boolean;
    registration_number?: string | null;
    updated_at: string;
    website_url?: string | null;
};

export type PasswordResetRequestResponse = {
    message: string;
};

export type PublicEventResponse = {
    description_de?: string | null;
    description_en?: string | null;
    end_date_time: string;
    event_url?: string | null;
    id: number;
    location?: string | null;
    organizer_id: number;
    organizer_name: string;
    start_date_time: string;
    title_de: string;
    title_en: string;
};

export type PublicOrganizerResponse = {
    active_events_count: number;
    activity_score: number;
    description_de?: string | null;
    description_en?: string | null;
    id: number;
    instagram_url?: string | null;
    linkedin_url?: string | null;
    location?: string | null;
    name: string;
    non_profit: boolean;
    registration_number?: string | null;
    website_url?: string | null;
};

export type RequestPasswordResetRequest = {
    email: string;
};

export type ResetPasswordRequest = {
    new_password: string;
    token: string;
};

export type SendNewsletterPreviewRequest = {
    html: string;
    subject: string;
};

export type SetupTokenInfoResponse = {
    account_name: string;
    account_type: AccountType;
};

export type SetupTokenLookupRequest = {
    token: string;
};

export type SetupTokenResponse = {
    setup_token: string;
};

export type UpdateEventRequest = {
    description_de?: string | null;
    description_en?: string | null;
    end_date_time?: string | null;
    event_url?: string | null;
    location?: string | null;
    publish_app?: boolean | null;
    publish_in_ical?: boolean | null;
    publish_newsletter?: boolean | null;
    publish_web?: boolean | null;
    start_date_time?: string | null;
    title_de?: string | null;
    title_en?: string | null;
};

export type UpdateOrganizerPermissionsRequest = {
    newsletter: boolean;
};

export type UpdateOrganizerRequest = {
    description_de?: string | null;
    description_en?: string | null;
    instagram_url?: string | null;
    linkedin_url?: string | null;
    location?: string | null;
    name?: string | null;
    non_profit?: boolean | null;
    registration_number?: string | null;
    website_url?: string | null;
};

export type ListOrganizerIcalEventsData = {
    body?: never;
    headers: {
        /**
         * Bearer API token
         */
        Authorization: string;
    };
    path: {
        /**
         * Organizer identifier
         */
        organizer_id: number;
    };
    query?: never;
    url: '/api/ical/{organizer_id}/events';
};

export type ListOrganizerIcalEventsResponses = {
    /**
     * Events for organizer that are iCal eligible
     */
    200: Array<PublicEventResponse>;
};

export type ListOrganizerIcalEventsResponse = ListOrganizerIcalEventsResponses[keyof ListOrganizerIcalEventsResponses];

export type InviteAdminData = {
    body: InviteAdminRequest;
    path?: never;
    query?: never;
    url: '/api/v1/admin/invite';
};

export type InviteAdminResponses = {
    /**
     * Admin invited
     */
    201: SetupTokenResponse;
};

export type InviteAdminResponse = InviteAdminResponses[keyof InviteAdminResponses];

export type ListAdminsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/list';
};

export type ListAdminsResponses = {
    /**
     * List admins including invite status
     */
    200: Array<AdminWithInvite>;
};

export type ListAdminsResponse = ListAdminsResponses[keyof ListAdminsResponses];

export type UpdateOrganizerPermissionsData = {
    body: UpdateOrganizerPermissionsRequest;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/admin/organizers/{id}/permissions';
};

export type UpdateOrganizerPermissionsResponses = {
    /**
     * Organizer permissions updated
     */
    200: OrganizerWithInvite;
};

export type UpdateOrganizerPermissionsResponse = UpdateOrganizerPermissionsResponses[keyof UpdateOrganizerPermissionsResponses];

export type ListAuditLogsData = {
    body?: never;
    path?: never;
    query?: {
        event_id?: number;
        organizer_id?: number;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/audit-logs';
};

export type ListAuditLogsResponses = {
    /**
     * List audit log entries
     */
    200: Array<AuditLogEntry>;
};

export type ListAuditLogsResponse = ListAuditLogsResponses[keyof ListAuditLogsResponses];

export type ChangePasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/change-password';
};

export type ChangePasswordResponses = {
    /**
     * Password changed
     */
    204: void;
};

export type ChangePasswordResponse = ChangePasswordResponses[keyof ChangePasswordResponses];

export type InitAccountData = {
    body: InitAccountRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/init';
};

export type InitAccountErrors = {
    /**
     * Already initialized or invalid token
     */
    400: unknown;
};

export type InitAccountResponses = {
    /**
     * Initialized; cookie set
     */
    200: AuthUserResponse;
};

export type InitAccountResponse = InitAccountResponses[keyof InitAccountResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginErrors = {
    /**
     * Invalid credentials
     */
    401: unknown;
};

export type LoginResponses = {
    /**
     * Logged in; cookie set
     */
    200: AuthUserResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutResponses = {
    /**
     * Logged out
     */
    204: void;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type MeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/me';
};

export type MeErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type MeResponses = {
    /**
     * Current user
     */
    200: AuthUserResponse;
};

export type MeResponse = MeResponses[keyof MeResponses];

export type LookupSetupTokenData = {
    body: SetupTokenLookupRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register-info';
};

export type LookupSetupTokenErrors = {
    /**
     * Invalid or expired token
     */
    400: unknown;
};

export type LookupSetupTokenResponses = {
    /**
     * Valid setup token
     */
    200: SetupTokenInfoResponse;
};

export type LookupSetupTokenResponse = LookupSetupTokenResponses[keyof LookupSetupTokenResponses];

export type RequestPasswordResetData = {
    body: RequestPasswordResetRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/request-password-reset';
};

export type RequestPasswordResetResponses = {
    /**
     * Password reset email sent if account exists
     */
    200: PasswordResetRequestResponse;
};

export type RequestPasswordResetResponse = RequestPasswordResetResponses[keyof RequestPasswordResetResponses];

export type ResetPasswordData = {
    body: ResetPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type ResetPasswordErrors = {
    /**
     * Invalid or expired token
     */
    400: unknown;
};

export type ResetPasswordResponses = {
    /**
     * Password reset successfully
     */
    204: void;
};

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses];

export type ListEventsData = {
    body?: never;
    path?: never;
    query?: {
        organizer_id?: number;
        upcoming_only?: boolean;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/events';
};

export type ListEventsErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors];

export type ListEventsResponses = {
    /**
     * List events
     */
    200: Array<Event>;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type CreateEventData = {
    body: CreateEventRequest;
    path?: never;
    query?: never;
    url: '/api/v1/events';
};

export type CreateEventResponses = {
    /**
     * Event created
     */
    201: Event;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type GetNewsletterDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/events/newsletter-data';
};

export type GetNewsletterDataErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetNewsletterDataError = GetNewsletterDataErrors[keyof GetNewsletterDataErrors];

export type GetNewsletterDataResponses = {
    /**
     * Get newsletter data
     */
    200: NewsletterDataResponse;
};

export type GetNewsletterDataResponse = GetNewsletterDataResponses[keyof GetNewsletterDataResponses];

export type SendNewsletterPreviewData = {
    body: SendNewsletterPreviewRequest;
    path?: never;
    query?: never;
    url: '/api/v1/events/newsletter-preview';
};

export type SendNewsletterPreviewErrors = {
    /**
     * Invalid request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type SendNewsletterPreviewError = SendNewsletterPreviewErrors[keyof SendNewsletterPreviewErrors];

export type SendNewsletterPreviewResponses = {
    /**
     * Newsletter preview email sent
     */
    204: void;
};

export type SendNewsletterPreviewResponse = SendNewsletterPreviewResponses[keyof SendNewsletterPreviewResponses];

export type DeleteEventData = {
    body?: never;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type DeleteEventResponses = {
    /**
     * Event removed
     */
    204: void;
};

export type DeleteEventResponse = DeleteEventResponses[keyof DeleteEventResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type GetEventErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetEventError = GetEventErrors[keyof GetEventErrors];

export type GetEventResponses = {
    /**
     * Event details
     */
    200: Event;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type UpdateEventData = {
    body: UpdateEventRequest;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/events/{id}';
};

export type UpdateEventResponses = {
    /**
     * Event updated
     */
    200: Event;
};

export type UpdateEventResponse = UpdateEventResponses[keyof UpdateEventResponses];

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/healthcheck';
};

export type HealthCheckResponses = {
    /**
     * API is ready
     */
    200: HealthResponse;
};

export type HealthCheckResponse = HealthCheckResponses[keyof HealthCheckResponses];

export type ListOrganizersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organizers';
};

export type ListOrganizersErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type ListOrganizersError = ListOrganizersErrors[keyof ListOrganizersErrors];

export type ListOrganizersResponses = {
    /**
     * List organizers
     */
    200: Array<OrganizerWithStatsResponse>;
};

export type ListOrganizersResponse = ListOrganizersResponses[keyof ListOrganizersResponses];

export type CreateOrganizerData = {
    body: CreateOrganizerRequest;
    path?: never;
    query?: never;
    url: '/api/v1/organizers';
};

export type CreateOrganizerResponses = {
    /**
     * Organizer created
     */
    201: SetupTokenResponse;
};

export type CreateOrganizerResponse = CreateOrganizerResponses[keyof CreateOrganizerResponses];

export type ListOrganizersAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organizers/admin';
};

export type ListOrganizersAdminResponses = {
    /**
     * List organizers including invite status
     */
    200: Array<OrganizerWithInvite>;
};

export type ListOrganizersAdminResponse = ListOrganizersAdminResponses[keyof ListOrganizersAdminResponses];

export type DeleteOrganizerData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type DeleteOrganizerResponses = {
    /**
     * Organizer removed
     */
    204: void;
};

export type DeleteOrganizerResponse = DeleteOrganizerResponses[keyof DeleteOrganizerResponses];

export type GetOrganizerData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type GetOrganizerErrors = {
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetOrganizerError = GetOrganizerErrors[keyof GetOrganizerErrors];

export type GetOrganizerResponses = {
    /**
     * Organizer details
     */
    200: OrganizerWithStatsResponse;
};

export type GetOrganizerResponse = GetOrganizerResponses[keyof GetOrganizerResponses];

export type UpdateOrganizerData = {
    body: UpdateOrganizerRequest;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}';
};

export type UpdateOrganizerResponses = {
    /**
     * Organizer updated
     */
    200: Organizer;
};

export type UpdateOrganizerResponse = UpdateOrganizerResponses[keyof UpdateOrganizerResponses];

export type GenerateSetupTokenData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizers/{id}/setup-token';
};

export type GenerateSetupTokenResponses = {
    /**
     * Setup token generated
     */
    200: SetupTokenResponse;
};

export type GenerateSetupTokenResponse = GenerateSetupTokenResponses[keyof GenerateSetupTokenResponses];

export type ListPublicEventsData = {
    body?: never;
    path?: never;
    query?: {
        organizer_id?: number;
        upcoming_only?: boolean;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/public/events';
};

export type ListPublicEventsResponses = {
    /**
     * List public events
     */
    200: Array<PublicEventResponse>;
};

export type ListPublicEventsResponse = ListPublicEventsResponses[keyof ListPublicEventsResponses];

export type GetPublicEventData = {
    body?: never;
    path: {
        /**
         * Event identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/public/events/{id}';
};

export type GetPublicEventErrors = {
    /**
     * Event not found or not published
     */
    404: unknown;
};

export type GetPublicEventResponses = {
    /**
     * Public event details
     */
    200: PublicEventResponse;
};

export type GetPublicEventResponse = GetPublicEventResponses[keyof GetPublicEventResponses];

export type ListPublicOrganizersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/public/organizers';
};

export type ListPublicOrganizersResponses = {
    /**
     * List public organizers
     */
    200: Array<PublicOrganizerResponse>;
};

export type ListPublicOrganizersResponse = ListPublicOrganizersResponses[keyof ListPublicOrganizersResponses];

export type GetPublicOrganizerData = {
    body?: never;
    path: {
        /**
         * Organizer identifier
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/public/organizers/{id}';
};

export type GetPublicOrganizerErrors = {
    /**
     * Organizer not found
     */
    404: unknown;
};

export type GetPublicOrganizerResponses = {
    /**
     * Public organizer details
     */
    200: PublicOrganizerResponse;
};

export type GetPublicOrganizerResponse = GetPublicOrganizerResponses[keyof GetPublicOrganizerResponses];
