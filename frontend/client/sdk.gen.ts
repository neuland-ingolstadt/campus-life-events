// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { ListAuditLogsData, ListAuditLogsResponses, ChangePasswordData, ChangePasswordResponses, InitAccountData, InitAccountResponses, InitAccountErrors, LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, MeData, MeResponses, MeErrors, LookupSetupTokenData, LookupSetupTokenResponses, LookupSetupTokenErrors, ListEventsData, ListEventsResponses, CreateEventData, CreateEventResponses, DeleteEventData, DeleteEventResponses, GetEventData, GetEventResponses, UpdateEventData, UpdateEventResponses, HealthCheckData, HealthCheckResponses, ListOrganizersData, ListOrganizersResponses, CreateOrganizerData, CreateOrganizerResponses, ListOrganizersAdminData, ListOrganizersAdminResponses, DeleteOrganizerData, DeleteOrganizerResponses, GetOrganizerData, GetOrganizerResponses, UpdateOrganizerData, UpdateOrganizerResponses, GenerateSetupTokenData, GenerateSetupTokenResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const listAuditLogs = <ThrowOnError extends boolean = false>(options?: Options<ListAuditLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAuditLogsResponses, unknown, ThrowOnError>({
        url: '/api/v1/audit-logs',
        ...options
    });
};

export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
    return (options.client ?? client).post<ChangePasswordResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const initAccount = <ThrowOnError extends boolean = false>(options: Options<InitAccountData, ThrowOnError>) => {
    return (options.client ?? client).post<InitAccountResponses, InitAccountErrors, ThrowOnError>({
        url: '/api/v1/auth/init',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options
    });
};

export const me = <ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) => {
    return (options?.client ?? client).get<MeResponses, MeErrors, ThrowOnError>({
        url: '/api/v1/auth/me',
        ...options
    });
};

export const lookupSetupToken = <ThrowOnError extends boolean = false>(options: Options<LookupSetupTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<LookupSetupTokenResponses, LookupSetupTokenErrors, ThrowOnError>({
        url: '/api/v1/auth/register-info',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listEvents = <ThrowOnError extends boolean = false>(options?: Options<ListEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListEventsResponses, unknown, ThrowOnError>({
        url: '/api/v1/events',
        ...options
    });
};

export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateEventResponses, unknown, ThrowOnError>({
        url: '/api/v1/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteEventResponses, unknown, ThrowOnError>({
        url: '/api/v1/events/{id}',
        ...options
    });
};

export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options.client ?? client).get<GetEventResponses, unknown, ThrowOnError>({
        url: '/api/v1/events/{id}',
        ...options
    });
};

export const updateEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateEventData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateEventResponses, unknown, ThrowOnError>({
        url: '/api/v1/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckResponses, unknown, ThrowOnError>({
        url: '/api/v1/healthcheck',
        ...options
    });
};

export const listOrganizers = <ThrowOnError extends boolean = false>(options?: Options<ListOrganizersData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOrganizersResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers',
        ...options
    });
};

export const createOrganizer = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateOrganizerResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listOrganizersAdmin = <ThrowOnError extends boolean = false>(options?: Options<ListOrganizersAdminData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOrganizersAdminResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers/admin',
        ...options
    });
};

export const deleteOrganizer = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizerData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteOrganizerResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers/{id}',
        ...options
    });
};

export const getOrganizer = <ThrowOnError extends boolean = false>(options: Options<GetOrganizerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetOrganizerResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers/{id}',
        ...options
    });
};

export const updateOrganizer = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizerData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateOrganizerResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const generateSetupToken = <ThrowOnError extends boolean = false>(options: Options<GenerateSetupTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateSetupTokenResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizers/{id}/setup-token',
        ...options
    });
};
